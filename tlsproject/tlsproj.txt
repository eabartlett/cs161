Project 1 - CS 161
Alex McKinney: cs161-,
Erik Bartlett: cs161-en, 22935019

------ Questions ------
1.  An attacker could complete a denial of service attack by spoofing either the client
or server's IP address and sending packets with error types or non-existent
types as a type of RST injection. Because of the way we wrote our code either
of these types will cause the code to terminate the connection.

2. The random_int() function takes in time(NULL) as the input to the srand() function,
so if an attacker was using a computer with a similar internal clock as ours, then
they could easily predict the output of random_int(). In other words, since NULL is
a non-random value, an adversary could easily replicate the random value that we are
using in our implementation because the adversary could easily infer the seed that we
are using.

3. A downgrade attack is possible if a man in the middle is able to intercept a message from
one endpoint to the other and then alter the cipher_suite field to be nothing, or as least secure
as possible. This way, the man in the middle is making it seem that the other endpoint is unable
to communicate unless the channel is lightly encrypted, or not encrypted at all. With this, the
man in the middle can easily view or decrypt the messages shared between the endhosts.
In order to mitigate this attack, we can establish a "minimum cipher suite" so that the endhosts
can confidently communicate without any worry of a man in the middle intercepting their conversation.

4. One easy attack would be a man in the middle attack where the attacker alters the initial
random numbers that the client and/or server send in the hello packets to be different so that
when the master secert is computed it will be wrong and the two endhosts will not be able to
establish a connection.

Another attack would be if the attacker is able to get a fake certificate for the server. 
The attacker would be a man in the middle and when the server sends it's certificate
the attacker could place its fake in the message. Then the man in the middle would be able to
get the premaster secret from the client and encrypt a separate one to send to the server.
In this way it would be able to establish different symmetric keys with each of the endhosts
and send whatever messages it wants either way.
